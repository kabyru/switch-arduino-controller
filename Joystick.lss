
Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000e00  00000e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  0080011c  0080011c  00000eb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004cc6  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016dc  00000000  00000000  00005e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dd0  00000000  00000000  00007502  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  0000a2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002086  00000000  00000000  0000a958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002cb1  00000000  00000000  0000c9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f68f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a6 c0       	rjmp	.+332    	; 0x14e <__ctors_end>
   2:	00 00       	nop
   4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
   6:	00 00       	nop
   8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
   a:	00 00       	nop
   c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
   e:	00 00       	nop
  10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
  12:	00 00       	nop
  14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
  16:	00 00       	nop
  18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
  1e:	00 00       	nop
  20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
  22:	00 00       	nop
  24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
  26:	00 00       	nop
  28:	ad c0       	rjmp	.+346    	; 0x184 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b6 c4       	rjmp	.+2412   	; 0x99a <__vector_11>
  2e:	00 00       	nop
  30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
  32:	00 00       	nop
  34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
  36:	00 00       	nop
  38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
  3e:	00 00       	nop
  40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
  42:	00 00       	nop
  44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
  46:	00 00       	nop
  48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
  4e:	00 00       	nop
  50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
  52:	00 00       	nop
  54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
  56:	00 00       	nop
  58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
  5e:	00 00       	nop
  60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
  62:	00 00       	nop
  64:	8f c0       	rjmp	.+286    	; 0x184 <__bad_interrupt>
  66:	00 00       	nop
  68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
  6e:	00 00       	nop
  70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>
  72:	00 00       	nop

00000074 <ProductString>:
  74:	24 03 50 00 4f 00 4b 00 4b 00 45 00 4e 00 20 00     $.P.O.K.K.E.N. .
  84:	43 00 4f 00 4e 00 54 00 52 00 4f 00 4c 00 4c 00     C.O.N.T.R.O.L.L.
  94:	45 00 52 00 00 00                                   E.R...

0000009a <ManufacturerString>:
  9a:	1c 03 48 00 4f 00 52 00 49 00 20 00 43 00 4f 00     ..H.O.R.I. .C.O.
  aa:	2e 00 2c 00 4c 00 54 00 44 00 2e 00 00 00           ..,.L.T.D.....

000000b8 <LanguageString>:
  b8:	04 03 09 04                                         ....

000000bc <ConfigurationDescriptor>:
  bc:	09 02 29 00 01 01 00 80 fa 09 04 00 00 02 03 00     ..).............
  cc:	00 00 09 21 11 01 00 01 22 56 00 07 05 02 03 40     ...!...."V.....@
  dc:	00 05 07 05 81 03 40 00 05                          ......@..

000000e5 <DeviceDescriptor>:
  e5:	12 01 00 02 00 00 00 40 0d 0f 92 00 00 01 01 02     .......@........
  f5:	00 01                                               ..

000000f7 <JoystickReport>:
  f7:	05 01 09 05 a1 01 15 00 25 01 35 00 45 01 75 01     ........%.5.E.u.
 107:	95 10 05 09 19 01 29 10 81 02 05 01 25 07 46 3b     ......).....%.F;
 117:	01 75 04 95 01 65 14 09 39 81 42 65 00 95 01 81     .u...e..9.Be....
 127:	01 26 ff 00 46 ff 00 09 30 09 31 09 32 09 35 75     .&..F...0.1.2.5u
 137:	08 95 04 81 02 06 00 ff 09 20 95 01 81 02 0a 21     ......... .....!
 147:	26 95 08 91 02 c0 00                                &......

0000014e <__ctors_end>:
 14e:	11 24       	eor	r1, r1
 150:	1f be       	out	0x3f, r1	; 63
 152:	cf ef       	ldi	r28, 0xFF	; 255
 154:	d2 e0       	ldi	r29, 0x02	; 2
 156:	de bf       	out	0x3e, r29	; 62
 158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	a0 e0       	ldi	r26, 0x00	; 0
 15e:	b1 e0       	ldi	r27, 0x01	; 1
 160:	e0 e0       	ldi	r30, 0x00	; 0
 162:	fe e0       	ldi	r31, 0x0E	; 14
 164:	02 c0       	rjmp	.+4      	; 0x16a <__do_copy_data+0x10>
 166:	05 90       	lpm	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	ac 31       	cpi	r26, 0x1C	; 28
 16c:	b1 07       	cpc	r27, r17
 16e:	d9 f7       	brne	.-10     	; 0x166 <__do_copy_data+0xc>

00000170 <__do_clear_bss>:
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	ac e1       	ldi	r26, 0x1C	; 28
 174:	b1 e0       	ldi	r27, 0x01	; 1
 176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
 178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
 17a:	a0 34       	cpi	r26, 0x40	; 64
 17c:	b2 07       	cpc	r27, r18
 17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
 180:	a8 d1       	rcall	.+848    	; 0x4d2 <main>
 182:	3c c6       	rjmp	.+3192   	; 0xdfc <_exit>

00000184 <__bad_interrupt>:
 184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <SetupHardware>:
}

// Configures hardware and peripherals, such as the USB peripherals.
void SetupHardware(void) {
	// We need to disable watchdog if enabled by bootloader/fuses.
	MCUSR &= ~(1 << WDRF);
 186:	84 b7       	in	r24, 0x34	; 52
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	a8 95       	wdr
 192:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 196:	88 61       	ori	r24, 0x18	; 24
 198:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 19c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 1a0:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 e8       	ldi	r24, 0x80	; 128
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 1ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__EEPROM_REGION_LENGTH__+0x7f0061>
 1b2:	0f be       	out	0x3f, r0	; 63
                  //We'll just flash all pins on both ports since the UNO R3
	DDRB  = 0xFF; //uses PORTB. Micro can use either or, but both give us 2 LEDs
	PORTB =  0x0; //The ATmega328P on the UNO will be resetting, so unplug it?
	#endif
	// The USB stack should be initialized last.
	USB_Init();
 1b4:	e3 c3       	rjmp	.+1990   	; 0x97c <USB_Init>

000001b6 <EVENT_USB_Device_Connect>:
 1b6:	08 95       	ret

000001b8 <EVENT_USB_Device_Disconnect>:
 1b8:	08 95       	ret

000001ba <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 1ba:	42 e3       	ldi	r20, 0x32	; 50
 1bc:	60 ec       	ldi	r22, 0xC0	; 192
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	1d d3       	rcall	.+1594   	; 0x7fc <Endpoint_ConfigureEndpoint_Prv>
 1c2:	42 e3       	ldi	r20, 0x32	; 50
 1c4:	61 ec       	ldi	r22, 0xC1	; 193
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	19 c3       	rjmp	.+1586   	; 0x7fc <Endpoint_ConfigureEndpoint_Prv>

000001ca <EVENT_USB_Device_ControlRequest>:

	// We can read ConfigSuccess to indicate a success or failure at this point.
}

// Process control requests sent to the device from the USB host.
void EVENT_USB_Device_ControlRequest(void) {
 1ca:	08 95       	ret

000001cc <GetNextReport>:
int bufindex = 0;
int duration_count = 0;
int portsval = 0;

// Prepare the next report for the host.
void GetNextReport(USB_JoystickReport_Input_t* const ReportData) {
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	dc 01       	movw	r26, r24

	// Prepare an empty report
	memset(ReportData, 0, sizeof(USB_JoystickReport_Input_t));
 1d2:	98 e0       	ldi	r25, 0x08	; 8
 1d4:	ed 01       	movw	r28, r26
 1d6:	e9 2f       	mov	r30, r25
 1d8:	19 92       	st	Y+, r1
 1da:	ea 95       	dec	r30
 1dc:	e9 f7       	brne	.-6      	; 0x1d8 <GetNextReport+0xc>
	ReportData->LX = STICK_CENTER;
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	13 96       	adiw	r26, 0x03	; 3
 1e2:	8c 93       	st	X, r24
 1e4:	13 97       	sbiw	r26, 0x03	; 3
	ReportData->LY = STICK_CENTER;
 1e6:	14 96       	adiw	r26, 0x04	; 4
 1e8:	8c 93       	st	X, r24
 1ea:	14 97       	sbiw	r26, 0x04	; 4
	ReportData->RX = STICK_CENTER;
 1ec:	15 96       	adiw	r26, 0x05	; 5
 1ee:	8c 93       	st	X, r24
 1f0:	15 97       	sbiw	r26, 0x05	; 5
	ReportData->RY = STICK_CENTER;
 1f2:	16 96       	adiw	r26, 0x06	; 6
 1f4:	8c 93       	st	X, r24
 1f6:	16 97       	sbiw	r26, 0x06	; 6
	ReportData->HAT = HAT_CENTER;
 1f8:	12 96       	adiw	r26, 0x02	; 2
 1fa:	9c 93       	st	X, r25
 1fc:	12 97       	sbiw	r26, 0x02	; 2

	// Repeat ECHOES times the last report
	if (echoes > 0)
 1fe:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <echoes>
 202:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <echoes+0x1>
 206:	18 16       	cp	r1, r24
 208:	19 06       	cpc	r1, r25
 20a:	6c f4       	brge	.+26     	; 0x226 <GetNextReport+0x5a>
	{
		memcpy(ReportData, &last_report, sizeof(USB_JoystickReport_Input_t));
 20c:	88 e0       	ldi	r24, 0x08	; 8
 20e:	eb e2       	ldi	r30, 0x2B	; 43
 210:	f1 e0       	ldi	r31, 0x01	; 1
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <GetNextReport+0x46>
		echoes--;
 21a:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <echoes>
 21e:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <echoes+0x1>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	07 c1       	rjmp	.+526    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		return;
	}

	// States and moves management
	switch (state)
 226:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <state>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	c1 f0       	breq	.+48     	; 0x25e <GetNextReport+0x92>
 22e:	68 f4       	brcc	.+26     	; 0x24a <GetNextReport+0x7e>
 230:	88 23       	and	r24, r24
 232:	99 f0       	breq	.+38     	; 0x25a <GetNextReport+0x8e>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	09 f0       	breq	.+2      	; 0x23a <GetNextReport+0x6e>
 238:	f3 c0       	rjmp	.+486    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		case SYNC_CONTROLLER:
			state = BREATHE;
			break;

		case SYNC_POSITION:
			bufindex = 0;
 23a:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <bufindex+0x1>
 23e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <bufindex>


			ReportData->Button = 0;
 242:	11 96       	adiw	r26, 0x01	; 1
 244:	1c 92       	st	X, r1
 246:	1e 92       	st	-X, r1
 248:	08 c0       	rjmp	.+16     	; 0x25a <GetNextReport+0x8e>
		echoes--;
		return;
	}

	// States and moves management
	switch (state)
 24a:	84 30       	cpi	r24, 0x04	; 4
 24c:	09 f4       	brne	.+2      	; 0x250 <GetNextReport+0x84>
 24e:	e5 c0       	rjmp	.+458    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 250:	40 f0       	brcs	.+16     	; 0x262 <GetNextReport+0x96>
 252:	85 30       	cpi	r24, 0x05	; 5
 254:	09 f4       	brne	.+2      	; 0x258 <GetNextReport+0x8c>
 256:	f2 c0       	rjmp	.+484    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 258:	e3 c0       	rjmp	.+454    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			ReportData->RX = STICK_CENTER;
			ReportData->RY = STICK_CENTER;
			ReportData->HAT = HAT_CENTER;


			state = BREATHE;
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	df c0       	rjmp	.+446    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			break;

		case BREATHE:
			state = PROCESS;
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	dd c0       	rjmp	.+442    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			break;

		case PROCESS:

			switch (step[bufindex].button)
 262:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bufindex>
 266:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <bufindex+0x1>
 26a:	63 e0       	ldi	r22, 0x03	; 3
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	b5 d5       	rcall	.+2922   	; 0xdda <__mulhi3>
 270:	80 50       	subi	r24, 0x00	; 0
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	ec 01       	movw	r28, r24
 276:	88 81       	ld	r24, Y
 278:	89 30       	cpi	r24, 0x09	; 9
 27a:	09 f4       	brne	.+2      	; 0x27e <GetNextReport+0xb2>
 27c:	66 c0       	rjmp	.+204    	; 0x34a <__stack+0x4b>
 27e:	00 f5       	brcc	.+64     	; 0x2c0 <GetNextReport+0xf4>
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	09 f4       	brne	.+2      	; 0x286 <GetNextReport+0xba>
 284:	58 c0       	rjmp	.+176    	; 0x336 <__stack+0x37>
 286:	70 f4       	brcc	.+28     	; 0x2a4 <GetNextReport+0xd8>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	09 f4       	brne	.+2      	; 0x28e <GetNextReport+0xc2>
 28c:	45 c0       	rjmp	.+138    	; 0x318 <__stack+0x19>
 28e:	e0 f1       	brcs	.+120    	; 0x308 <__stack+0x9>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	f1 f1       	breq	.+124    	; 0x310 <__stack+0x11>
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	09 f0       	breq	.+2      	; 0x29a <GetNextReport+0xce>
 298:	82 c0       	rjmp	.+260    	; 0x39e <__stack+0x9f>
				case DOWN:
					ReportData->LY = STICK_MAX;				
					break;

				case RIGHT:
					ReportData->LX = STICK_MAX;				
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	13 96       	adiw	r26, 0x03	; 3
 29e:	8c 93       	st	X, r24
 2a0:	13 97       	sbiw	r26, 0x03	; 3
					break;
 2a2:	7d c0       	rjmp	.+250    	; 0x39e <__stack+0x9f>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2a4:	86 30       	cpi	r24, 0x06	; 6
 2a6:	e9 f1       	breq	.+122    	; 0x322 <__stack+0x23>
 2a8:	08 f4       	brcc	.+2      	; 0x2ac <GetNextReport+0xe0>
 2aa:	4a c0       	rjmp	.+148    	; 0x340 <__stack+0x41>
 2ac:	87 30       	cpi	r24, 0x07	; 7
 2ae:	f1 f1       	breq	.+124    	; 0x32c <__stack+0x2d>
 2b0:	88 30       	cpi	r24, 0x08	; 8
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <GetNextReport+0xea>
 2b4:	74 c0       	rjmp	.+232    	; 0x39e <__stack+0x9f>
				case Y:
					ReportData->Button |= SWITCH_Y;
					break;
				
				case L:
					ReportData->Button |= SWITCH_L;
 2b6:	8d 91       	ld	r24, X+
 2b8:	9c 91       	ld	r25, X
 2ba:	11 97       	sbiw	r26, 0x01	; 1
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	6c c0       	rjmp	.+216    	; 0x398 <__stack+0x99>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2c0:	8e 30       	cpi	r24, 0x0E	; 14
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <GetNextReport+0xfa>
 2c4:	60 c0       	rjmp	.+192    	; 0x386 <__stack+0x87>
 2c6:	80 f4       	brcc	.+32     	; 0x2e8 <GetNextReport+0x11c>
 2c8:	8b 30       	cpi	r24, 0x0B	; 11
 2ca:	09 f4       	brne	.+2      	; 0x2ce <GetNextReport+0x102>
 2cc:	48 c0       	rjmp	.+144    	; 0x35e <__stack+0x5f>
 2ce:	08 f4       	brcc	.+2      	; 0x2d2 <GetNextReport+0x106>
 2d0:	41 c0       	rjmp	.+130    	; 0x354 <__stack+0x55>
 2d2:	8c 30       	cpi	r24, 0x0C	; 12
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <GetNextReport+0x10c>
 2d6:	48 c0       	rjmp	.+144    	; 0x368 <__stack+0x69>
 2d8:	8d 30       	cpi	r24, 0x0D	; 13
 2da:	09 f0       	breq	.+2      	; 0x2de <GetNextReport+0x112>
 2dc:	60 c0       	rjmp	.+192    	; 0x39e <__stack+0x9f>
				case ZR:
					ReportData->Button |= SWITCH_ZR;
					break;
				
				case MINUS:
					ReportData->Button |= SWITCH_MINUS;
 2de:	8d 91       	ld	r24, X+
 2e0:	9c 91       	ld	r25, X
 2e2:	11 97       	sbiw	r26, 0x01	; 1
 2e4:	91 60       	ori	r25, 0x01	; 1
 2e6:	58 c0       	rjmp	.+176    	; 0x398 <__stack+0x99>
			state = PROCESS;
			break;

		case PROCESS:

			switch (step[bufindex].button)
 2e8:	80 31       	cpi	r24, 0x10	; 16
 2ea:	09 f4       	brne	.+2      	; 0x2ee <GetNextReport+0x122>
 2ec:	42 c0       	rjmp	.+132    	; 0x372 <__stack+0x73>
 2ee:	08 f4       	brcc	.+2      	; 0x2f2 <GetNextReport+0x126>
 2f0:	4f c0       	rjmp	.+158    	; 0x390 <__stack+0x91>
 2f2:	81 31       	cpi	r24, 0x11	; 17
 2f4:	09 f4       	brne	.+2      	; 0x2f8 <GetNextReport+0x12c>
 2f6:	42 c0       	rjmp	.+132    	; 0x37c <__stack+0x7d>
 2f8:	83 31       	cpi	r24, 0x13	; 19
 2fa:	09 f0       	breq	.+2      	; 0x2fe <GetNextReport+0x132>
 2fc:	50 c0       	rjmp	.+160    	; 0x39e <__stack+0x9f>
				case CAPTURE:
					ReportData->Button |= SWITCH_CAPTURE;
					break;

				case TRIGGERS:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 2fe:	8d 91       	ld	r24, X+
 300:	9c 91       	ld	r25, X
 302:	11 97       	sbiw	r26, 0x01	; 1
 304:	80 63       	ori	r24, 0x30	; 48
 306:	48 c0       	rjmp	.+144    	; 0x398 <__stack+0x99>

			switch (step[bufindex].button)
			{

				case UP:
					ReportData->LY = STICK_MIN;				
 308:	14 96       	adiw	r26, 0x04	; 4
 30a:	1c 92       	st	X, r1
 30c:	14 97       	sbiw	r26, 0x04	; 4
					break;
 30e:	47 c0       	rjmp	.+142    	; 0x39e <__stack+0x9f>

				case LEFT:
					ReportData->LX = STICK_MIN;				
 310:	13 96       	adiw	r26, 0x03	; 3
 312:	1c 92       	st	X, r1
 314:	13 97       	sbiw	r26, 0x03	; 3
					break;
 316:	43 c0       	rjmp	.+134    	; 0x39e <__stack+0x9f>

				case DOWN:
					ReportData->LY = STICK_MAX;				
 318:	8f ef       	ldi	r24, 0xFF	; 255
 31a:	14 96       	adiw	r26, 0x04	; 4
 31c:	8c 93       	st	X, r24
 31e:	14 97       	sbiw	r26, 0x04	; 4
					break;
 320:	3e c0       	rjmp	.+124    	; 0x39e <__stack+0x9f>
				case RIGHT:
					ReportData->LX = STICK_MAX;				
					break;

				case A:
					ReportData->Button |= SWITCH_A;
 322:	8d 91       	ld	r24, X+
 324:	9c 91       	ld	r25, X
 326:	11 97       	sbiw	r26, 0x01	; 1
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	36 c0       	rjmp	.+108    	; 0x398 <__stack+0x99>
					break;

				case B:
					ReportData->Button |= SWITCH_B;
 32c:	8d 91       	ld	r24, X+
 32e:	9c 91       	ld	r25, X
 330:	11 97       	sbiw	r26, 0x01	; 1
 332:	82 60       	ori	r24, 0x02	; 2
 334:	31 c0       	rjmp	.+98     	; 0x398 <__stack+0x99>
					break;

				case X:
					ReportData->Button |= SWITCH_X;
 336:	8d 91       	ld	r24, X+
 338:	9c 91       	ld	r25, X
 33a:	11 97       	sbiw	r26, 0x01	; 1
 33c:	88 60       	ori	r24, 0x08	; 8
 33e:	2c c0       	rjmp	.+88     	; 0x398 <__stack+0x99>
					break;

				case Y:
					ReportData->Button |= SWITCH_Y;
 340:	8d 91       	ld	r24, X+
 342:	9c 91       	ld	r25, X
 344:	11 97       	sbiw	r26, 0x01	; 1
 346:	81 60       	ori	r24, 0x01	; 1
 348:	27 c0       	rjmp	.+78     	; 0x398 <__stack+0x99>
				case L:
					ReportData->Button |= SWITCH_L;
					break;

				case R:
					ReportData->Button |= SWITCH_R;
 34a:	8d 91       	ld	r24, X+
 34c:	9c 91       	ld	r25, X
 34e:	11 97       	sbiw	r26, 0x01	; 1
 350:	80 62       	ori	r24, 0x20	; 32
 352:	22 c0       	rjmp	.+68     	; 0x398 <__stack+0x99>
					break;
				
				case ZL:
					ReportData->Button |= SWITCH_ZL;
 354:	8d 91       	ld	r24, X+
 356:	9c 91       	ld	r25, X
 358:	11 97       	sbiw	r26, 0x01	; 1
 35a:	80 64       	ori	r24, 0x40	; 64
 35c:	1d c0       	rjmp	.+58     	; 0x398 <__stack+0x99>
					break;
				
				case ZR:
					ReportData->Button |= SWITCH_ZR;
 35e:	8d 91       	ld	r24, X+
 360:	9c 91       	ld	r25, X
 362:	11 97       	sbiw	r26, 0x01	; 1
 364:	80 68       	ori	r24, 0x80	; 128
 366:	18 c0       	rjmp	.+48     	; 0x398 <__stack+0x99>
				case MINUS:
					ReportData->Button |= SWITCH_MINUS;
					break;
				
				case PLUS:
					ReportData->Button |= SWITCH_PLUS;
 368:	8d 91       	ld	r24, X+
 36a:	9c 91       	ld	r25, X
 36c:	11 97       	sbiw	r26, 0x01	; 1
 36e:	92 60       	ori	r25, 0x02	; 2
 370:	13 c0       	rjmp	.+38     	; 0x398 <__stack+0x99>
					break;
				
				case LCLICK:
					ReportData->Button |= SWITCH_LCLICK;
 372:	8d 91       	ld	r24, X+
 374:	9c 91       	ld	r25, X
 376:	11 97       	sbiw	r26, 0x01	; 1
 378:	94 60       	ori	r25, 0x04	; 4
 37a:	0e c0       	rjmp	.+28     	; 0x398 <__stack+0x99>
					break;
				
				case RCLICK:
					ReportData->Button |= SWITCH_RCLICK;
 37c:	8d 91       	ld	r24, X+
 37e:	9c 91       	ld	r25, X
 380:	11 97       	sbiw	r26, 0x01	; 1
 382:	98 60       	ori	r25, 0x08	; 8
 384:	09 c0       	rjmp	.+18     	; 0x398 <__stack+0x99>
					break;
				
				case HOME:
					ReportData->Button |= SWITCH_HOME;
 386:	8d 91       	ld	r24, X+
 388:	9c 91       	ld	r25, X
 38a:	11 97       	sbiw	r26, 0x01	; 1
 38c:	90 61       	ori	r25, 0x10	; 16
 38e:	04 c0       	rjmp	.+8      	; 0x398 <__stack+0x99>
					break;
				
				case CAPTURE:
					ReportData->Button |= SWITCH_CAPTURE;
 390:	8d 91       	ld	r24, X+
 392:	9c 91       	ld	r25, X
 394:	11 97       	sbiw	r26, 0x01	; 1
 396:	90 62       	ori	r25, 0x20	; 32
					break;

				case TRIGGERS:
					ReportData->Button |= SWITCH_L | SWITCH_R;
 398:	11 96       	adiw	r26, 0x01	; 1
 39a:	9c 93       	st	X, r25
 39c:	8e 93       	st	-X, r24
					ReportData->RY = STICK_CENTER;
					ReportData->HAT = HAT_CENTER;
					break;
			}

			duration_count++;
 39e:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <duration_count>
 3a2:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <duration_count+0x1>
 3a6:	31 96       	adiw	r30, 0x01	; 1
 3a8:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <duration_count+0x1>
 3ac:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <duration_count>

			if (duration_count > step[bufindex].duration)
 3b0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <bufindex>
 3b4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <bufindex+0x1>
 3b8:	c9 01       	movw	r24, r18
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	0d d5       	rcall	.+2586   	; 0xdda <__mulhi3>
 3c0:	80 50       	subi	r24, 0x00	; 0
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	ec 01       	movw	r28, r24
 3c6:	89 81       	ldd	r24, Y+1	; 0x01
 3c8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ca:	8e 17       	cp	r24, r30
 3cc:	9f 07       	cpc	r25, r31
 3ce:	50 f4       	brcc	.+20     	; 0x3e4 <__stack+0xe5>
			{
				bufindex++;
 3d0:	2f 5f       	subi	r18, 0xFF	; 255
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
 3d4:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <bufindex+0x1>
 3d8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <bufindex>
				duration_count = 0;				
 3dc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <duration_count+0x1>
 3e0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <duration_count>
			}


			if (bufindex > (int)( sizeof(step) / sizeof(step[0])) - 1)
 3e4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <bufindex>
 3e8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <bufindex+0x1>
 3ec:	09 97       	sbiw	r24, 0x09	; 9
 3ee:	c4 f0       	brlt	.+48     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			{

				// state = CLEANUP;

				bufindex = 7;
 3f0:	87 e0       	ldi	r24, 0x07	; 7
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <bufindex+0x1>
 3f8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <bufindex>
				duration_count = 0;
 3fc:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <duration_count+0x1>
 400:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <duration_count>

				state = BREATHE;
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>

				ReportData->LX = STICK_CENTER;
 40a:	80 e8       	ldi	r24, 0x80	; 128
 40c:	13 96       	adiw	r26, 0x03	; 3
 40e:	8c 93       	st	X, r24
 410:	13 97       	sbiw	r26, 0x03	; 3
				ReportData->LY = STICK_CENTER;
 412:	14 96       	adiw	r26, 0x04	; 4
 414:	8c 93       	st	X, r24
 416:	14 97       	sbiw	r26, 0x04	; 4
 418:	03 c0       	rjmp	.+6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			}

			break;

		case CLEANUP:
			state = DONE;
 41a:	85 e0       	ldi	r24, 0x05	; 5
 41c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <state>
	// if (state != SYNC_CONTROLLER && state != SYNC_POSITION)
	// 	if (pgm_read_byte(&(image_data[(xpos / 8) + (ypos * 40)])) & 1 << (xpos % 8))
	// 		ReportData->Button |= SWITCH_A;

	// Prepare to echo this report
	memcpy(&last_report, ReportData, sizeof(USB_JoystickReport_Input_t));
 420:	88 e0       	ldi	r24, 0x08	; 8
 422:	fd 01       	movw	r30, r26
 424:	ab e2       	ldi	r26, 0x2B	; 43
 426:	b1 e0       	ldi	r27, 0x01	; 1
 428:	01 90       	ld	r0, Z+
 42a:	0d 92       	st	X+, r0
 42c:	8a 95       	dec	r24
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	echoes = ECHOES;
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <echoes+0x1>
 438:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <echoes>

}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <HID_Task>:

	// Not used here, it looks like we don't receive control request from the Switch.
}

// Process and deliver data from IN and OUT endpoints.
void HID_Task(void) {
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	28 97       	sbiw	r28, 0x08	; 8
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
	// If the device isn't connected and properly configured, we can't do anything here.
	if (USB_DeviceState != DEVICE_STATE_Configured)
 456:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 45a:	84 30       	cpi	r24, 0x04	; 4
 45c:	89 f5       	brne	.+98     	; 0x4c0 <HID_Task+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 464:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		return;

	// We'll start with the OUT endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_OUT_EPADDR);
	// We'll check to see if we received something on the OUT endpoint.
	if (Endpoint_IsOUTReceived())
 468:	82 ff       	sbrs	r24, 2
 46a:	12 c0       	rjmp	.+36     	; 0x490 <HID_Task+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 46c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		// If we did, and the packet has data, we'll react to it.
		if (Endpoint_IsReadWriteAllowed())
 470:	85 ff       	sbrs	r24, 5
 472:	09 c0       	rjmp	.+18     	; 0x486 <HID_Task+0x44>
		{
			// We'll create a place to store our data received from the host.
			USB_JoystickReport_Output_t JoystickOutputData;
			// We'll then take in that data, setting it up in our storage.
			while(Endpoint_Read_Stream_LE(&JoystickOutputData, sizeof(JoystickOutputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	67 e0       	ldi	r22, 0x07	; 7
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	ce 01       	movw	r24, r28
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	b8 d0       	rcall	.+368    	; 0x5f2 <Endpoint_Read_Stream_LE>
 482:	81 11       	cpse	r24, r1
 484:	f7 cf       	rjmp	.-18     	; 0x474 <HID_Task+0x32>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 486:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 48a:	8b 77       	andi	r24, 0x7B	; 123
 48c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 496:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	}

	// We'll then move on to the IN endpoint.
	Endpoint_SelectEndpoint(JOYSTICK_IN_EPADDR);
	// We first check to see if the host is ready to accept data.
	if (Endpoint_IsINReady())
 49a:	80 ff       	sbrs	r24, 0
 49c:	11 c0       	rjmp	.+34     	; 0x4c0 <HID_Task+0x7e>
	{
		// We'll create an empty report.
		USB_JoystickReport_Input_t JoystickInputData;
		// We'll then populate this report with what we want to send to the host.
		GetNextReport(&JoystickInputData);
 49e:	ce 01       	movw	r24, r28
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	94 de       	rcall	.-728    	; 0x1cc <GetNextReport>
		// Once populated, we can output this data to the host. We do this by first writing the data to the control stream.
		while(Endpoint_Write_Stream_LE(&JoystickInputData, sizeof(JoystickInputData), NULL) != ENDPOINT_RWSTREAM_NoError);
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	68 e0       	ldi	r22, 0x08	; 8
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	ce 01       	movw	r24, r28
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	56 d0       	rcall	.+172    	; 0x55e <Endpoint_Write_Stream_LE>
 4b2:	81 11       	cpse	r24, r1
 4b4:	f7 cf       	rjmp	.-18     	; 0x4a4 <HID_Task+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4ba:	8e 77       	andi	r24, 0x7E	; 126
 4bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		// We then send an IN packet on this endpoint.
		Endpoint_ClearIN();
	}
}
 4c0:	28 96       	adiw	r28, 0x08	; 8
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	de bf       	out	0x3e, r29	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	cd bf       	out	0x3d, r28	; 61
 4cc:	df 91       	pop	r29
 4ce:	cf 91       	pop	r28
 4d0:	08 95       	ret

000004d2 <main>:


// Main entry point.
int main(void) {
	// This will perform hardware and peripheral setup.
	SetupHardware();
 4d2:	59 de       	rcall	.-846    	; 0x186 <SetupHardware>
	GlobalInterruptEnable();
	// Two main tasks will be perpetually executed, which will take user input (in the form of the script) and send it as output to the Switch.
	for (;;)
	{
		// We need to run our task to process and deliver data for our IN and OUT endpoints.
		HID_Task();
 4d4:	78 94       	sei
		// We also need to run the main USB management task.
		USB_USBTask();
 4d6:	b5 df       	rcall	.-150    	; 0x442 <HID_Task>
 4d8:	66 d4       	rcall	.+2252   	; 0xda6 <USB_USBTask>
 4da:	fd cf       	rjmp	.-6      	; 0x4d6 <main+0x4>

000004dc <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4dc:	29 2f       	mov	r18, r25
 4de:	33 27       	eor	r19, r19
 4e0:	23 30       	cpi	r18, 0x03	; 3
 4e2:	31 05       	cpc	r19, r1
 4e4:	e1 f0       	breq	.+56     	; 0x51e <CALLBACK_USB_GetDescriptor+0x42>
 4e6:	58 f4       	brcc	.+22     	; 0x4fe <CALLBACK_USB_GetDescriptor+0x22>
 4e8:	21 30       	cpi	r18, 0x01	; 1
 4ea:	31 05       	cpc	r19, r1
 4ec:	99 f0       	breq	.+38     	; 0x514 <CALLBACK_USB_GetDescriptor+0x38>
 4ee:	22 30       	cpi	r18, 0x02	; 2
 4f0:	31 05       	cpc	r19, r1
 4f2:	69 f5       	brne	.+90     	; 0x54e <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 4f4:	89 e2       	ldi	r24, 0x29	; 41
 4f6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 4f8:	2c eb       	ldi	r18, 0xBC	; 188
 4fa:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 4fc:	2c c0       	rjmp	.+88     	; 0x556 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 4fe:	21 32       	cpi	r18, 0x21	; 33
 500:	31 05       	cpc	r19, r1
 502:	01 f1       	breq	.+64     	; 0x544 <CALLBACK_USB_GetDescriptor+0x68>
 504:	22 32       	cpi	r18, 0x22	; 34
 506:	31 05       	cpc	r19, r1
 508:	11 f5       	brne	.+68     	; 0x54e <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
 50a:	86 e5       	ldi	r24, 0x56	; 86
 50c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = &JoystickReport;
 50e:	27 ef       	ldi	r18, 0xF7	; 247
 510:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(JoystickReport);
			break;
 512:	21 c0       	rjmp	.+66     	; 0x556 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 514:	82 e1       	ldi	r24, 0x12	; 18
 516:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 518:	25 ee       	ldi	r18, 0xE5	; 229
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	1c c0       	rjmp	.+56     	; 0x556 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 51e:	99 27       	eor	r25, r25
 520:	81 30       	cpi	r24, 0x01	; 1
 522:	91 05       	cpc	r25, r1
 524:	49 f0       	breq	.+18     	; 0x538 <CALLBACK_USB_GetDescriptor+0x5c>
 526:	28 f0       	brcs	.+10     	; 0x532 <CALLBACK_USB_GetDescriptor+0x56>
 528:	02 97       	sbiw	r24, 0x02	; 2
 52a:	89 f4       	brne	.+34     	; 0x54e <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 52c:	e4 e7       	ldi	r30, 0x74	; 116
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	05 c0       	rjmp	.+10     	; 0x53c <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 532:	e8 eb       	ldi	r30, 0xB8	; 184
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 538:	ea e9       	ldi	r30, 0x9A	; 154
 53a:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 53c:	84 91       	lpm	r24, Z
 53e:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 540:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 542:	09 c0       	rjmp	.+18     	; 0x556 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 544:	89 e0       	ldi	r24, 0x09	; 9
 546:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_JoystickHID;
 548:	2e ec       	ldi	r18, 0xCE	; 206
 54a:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 54c:	04 c0       	rjmp	.+8      	; 0x556 <CALLBACK_USB_GetDescriptor+0x7a>
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	90 e0       	ldi	r25, 0x00	; 0
	const void** const DescriptorAddress
) {
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 552:	20 e0       	ldi	r18, 0x00	; 0
 554:	30 e0       	ldi	r19, 0x00	; 0
			Address = &JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}

	*DescriptorAddress = Address;
 556:	fa 01       	movw	r30, r20
 558:	31 83       	std	Z+1, r19	; 0x01
 55a:	20 83       	st	Z, r18
	return Size;
}
 55c:	08 95       	ret

0000055e <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 55e:	cf 92       	push	r12
 560:	df 92       	push	r13
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ec 01       	movw	r28, r24
 570:	8b 01       	movw	r16, r22
 572:	7a 01       	movw	r14, r20
 574:	97 d1       	rcall	.+814    	; 0x8a4 <Endpoint_WaitUntilReady>
 576:	81 11       	cpse	r24, r1
 578:	33 c0       	rjmp	.+102    	; 0x5e0 <Endpoint_Write_Stream_LE+0x82>
 57a:	e1 14       	cp	r14, r1
 57c:	f1 04       	cpc	r15, r1
 57e:	39 f0       	breq	.+14     	; 0x58e <Endpoint_Write_Stream_LE+0x30>
 580:	f7 01       	movw	r30, r14
 582:	80 81       	ld	r24, Z
 584:	91 81       	ldd	r25, Z+1	; 0x01
 586:	08 1b       	sub	r16, r24
 588:	19 0b       	sbc	r17, r25
 58a:	c8 0f       	add	r28, r24
 58c:	d9 1f       	adc	r29, r25
 58e:	c1 2c       	mov	r12, r1
 590:	d1 2c       	mov	r13, r1
 592:	01 15       	cp	r16, r1
 594:	11 05       	cpc	r17, r1
 596:	19 f1       	breq	.+70     	; 0x5de <Endpoint_Write_Stream_LE+0x80>
 598:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 59c:	85 fd       	sbrc	r24, 5
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <Endpoint_Write_Stream_LE+0x6e>
 5a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5a4:	8e 77       	andi	r24, 0x7E	; 126
 5a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5aa:	fd d3       	rcall	.+2042   	; 0xda6 <USB_USBTask>
 5ac:	e1 14       	cp	r14, r1
 5ae:	f1 04       	cpc	r15, r1
 5b0:	49 f0       	breq	.+18     	; 0x5c4 <Endpoint_Write_Stream_LE+0x66>
 5b2:	f7 01       	movw	r30, r14
 5b4:	80 81       	ld	r24, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	c8 0e       	add	r12, r24
 5ba:	d9 1e       	adc	r13, r25
 5bc:	d1 82       	std	Z+1, r13	; 0x01
 5be:	c0 82       	st	Z, r12
 5c0:	85 e0       	ldi	r24, 0x05	; 5
 5c2:	0e c0       	rjmp	.+28     	; 0x5e0 <Endpoint_Write_Stream_LE+0x82>
 5c4:	6f d1       	rcall	.+734    	; 0x8a4 <Endpoint_WaitUntilReady>
 5c6:	88 23       	and	r24, r24
 5c8:	21 f3       	breq	.-56     	; 0x592 <Endpoint_Write_Stream_LE+0x34>
 5ca:	0a c0       	rjmp	.+20     	; 0x5e0 <Endpoint_Write_Stream_LE+0x82>
 5cc:	89 91       	ld	r24, Y+
 5ce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 5d2:	01 50       	subi	r16, 0x01	; 1
 5d4:	11 09       	sbc	r17, r1
 5d6:	ff ef       	ldi	r31, 0xFF	; 255
 5d8:	cf 1a       	sub	r12, r31
 5da:	df 0a       	sbc	r13, r31
 5dc:	da cf       	rjmp	.-76     	; 0x592 <Endpoint_Write_Stream_LE+0x34>
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	df 90       	pop	r13
 5ee:	cf 90       	pop	r12
 5f0:	08 95       	ret

000005f2 <Endpoint_Read_Stream_LE>:
 5f2:	cf 92       	push	r12
 5f4:	df 92       	push	r13
 5f6:	ef 92       	push	r14
 5f8:	ff 92       	push	r15
 5fa:	0f 93       	push	r16
 5fc:	1f 93       	push	r17
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	ec 01       	movw	r28, r24
 604:	8b 01       	movw	r16, r22
 606:	7a 01       	movw	r14, r20
 608:	4d d1       	rcall	.+666    	; 0x8a4 <Endpoint_WaitUntilReady>
 60a:	81 11       	cpse	r24, r1
 60c:	33 c0       	rjmp	.+102    	; 0x674 <Endpoint_Read_Stream_LE+0x82>
 60e:	e1 14       	cp	r14, r1
 610:	f1 04       	cpc	r15, r1
 612:	39 f0       	breq	.+14     	; 0x622 <Endpoint_Read_Stream_LE+0x30>
 614:	f7 01       	movw	r30, r14
 616:	80 81       	ld	r24, Z
 618:	91 81       	ldd	r25, Z+1	; 0x01
 61a:	08 1b       	sub	r16, r24
 61c:	19 0b       	sbc	r17, r25
 61e:	c8 0f       	add	r28, r24
 620:	d9 1f       	adc	r29, r25
 622:	c1 2c       	mov	r12, r1
 624:	d1 2c       	mov	r13, r1
 626:	01 15       	cp	r16, r1
 628:	11 05       	cpc	r17, r1
 62a:	19 f1       	breq	.+70     	; 0x672 <Endpoint_Read_Stream_LE+0x80>
 62c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 630:	85 fd       	sbrc	r24, 5
 632:	16 c0       	rjmp	.+44     	; 0x660 <Endpoint_Read_Stream_LE+0x6e>
 634:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 638:	8b 77       	andi	r24, 0x7B	; 123
 63a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 63e:	b3 d3       	rcall	.+1894   	; 0xda6 <USB_USBTask>
 640:	e1 14       	cp	r14, r1
 642:	f1 04       	cpc	r15, r1
 644:	49 f0       	breq	.+18     	; 0x658 <Endpoint_Read_Stream_LE+0x66>
 646:	f7 01       	movw	r30, r14
 648:	80 81       	ld	r24, Z
 64a:	91 81       	ldd	r25, Z+1	; 0x01
 64c:	c8 0e       	add	r12, r24
 64e:	d9 1e       	adc	r13, r25
 650:	d1 82       	std	Z+1, r13	; 0x01
 652:	c0 82       	st	Z, r12
 654:	85 e0       	ldi	r24, 0x05	; 5
 656:	0e c0       	rjmp	.+28     	; 0x674 <Endpoint_Read_Stream_LE+0x82>
 658:	25 d1       	rcall	.+586    	; 0x8a4 <Endpoint_WaitUntilReady>
 65a:	88 23       	and	r24, r24
 65c:	21 f3       	breq	.-56     	; 0x626 <Endpoint_Read_Stream_LE+0x34>
 65e:	0a c0       	rjmp	.+20     	; 0x674 <Endpoint_Read_Stream_LE+0x82>
 660:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 664:	89 93       	st	Y+, r24
 666:	01 50       	subi	r16, 0x01	; 1
 668:	11 09       	sbc	r17, r1
 66a:	ff ef       	ldi	r31, 0xFF	; 255
 66c:	cf 1a       	sub	r12, r31
 66e:	df 0a       	sbc	r13, r31
 670:	da cf       	rjmp	.-76     	; 0x626 <Endpoint_Read_Stream_LE+0x34>
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	08 95       	ret

00000686 <Endpoint_Write_Control_Stream_LE>:
 686:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <USB_ControlRequest+0x6>
 68a:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <USB_ControlRequest+0x7>
 68e:	26 17       	cp	r18, r22
 690:	37 07       	cpc	r19, r23
 692:	48 f0       	brcs	.+18     	; 0x6a6 <Endpoint_Write_Control_Stream_LE+0x20>
 694:	61 15       	cp	r22, r1
 696:	71 05       	cpc	r23, r1
 698:	39 f4       	brne	.+14     	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0x22>
 69a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 69e:	2e 77       	andi	r18, 0x7E	; 126
 6a0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <Endpoint_Write_Control_Stream_LE+0x22>
 6a6:	b9 01       	movw	r22, r18
 6a8:	fc 01       	movw	r30, r24
 6aa:	20 e0       	ldi	r18, 0x00	; 0
 6ac:	61 15       	cp	r22, r1
 6ae:	71 05       	cpc	r23, r1
 6b0:	69 f1       	breq	.+90     	; 0x70c <Endpoint_Write_Control_Stream_LE+0x86>
 6b2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 6b6:	88 23       	and	r24, r24
 6b8:	e1 f1       	breq	.+120    	; 0x732 <Endpoint_Write_Control_Stream_LE+0xac>
 6ba:	85 30       	cpi	r24, 0x05	; 5
 6bc:	e1 f1       	breq	.+120    	; 0x736 <Endpoint_Write_Control_Stream_LE+0xb0>
 6be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6c2:	83 fd       	sbrc	r24, 3
 6c4:	3a c0       	rjmp	.+116    	; 0x73a <Endpoint_Write_Control_Stream_LE+0xb4>
 6c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6ca:	82 fd       	sbrc	r24, 2
 6cc:	2c c0       	rjmp	.+88     	; 0x726 <Endpoint_Write_Control_Stream_LE+0xa0>
 6ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 6d2:	80 ff       	sbrs	r24, 0
 6d4:	eb cf       	rjmp	.-42     	; 0x6ac <Endpoint_Write_Control_Stream_LE+0x26>
 6d6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	61 15       	cp	r22, r1
 6de:	71 05       	cpc	r23, r1
 6e0:	51 f0       	breq	.+20     	; 0x6f6 <Endpoint_Write_Control_Stream_LE+0x70>
 6e2:	80 34       	cpi	r24, 0x40	; 64
 6e4:	91 05       	cpc	r25, r1
 6e6:	38 f4       	brcc	.+14     	; 0x6f6 <Endpoint_Write_Control_Stream_LE+0x70>
 6e8:	21 91       	ld	r18, Z+
 6ea:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 6ee:	61 50       	subi	r22, 0x01	; 1
 6f0:	71 09       	sbc	r23, r1
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	f3 cf       	rjmp	.-26     	; 0x6dc <Endpoint_Write_Control_Stream_LE+0x56>
 6f6:	21 e0       	ldi	r18, 0x01	; 1
 6f8:	80 34       	cpi	r24, 0x40	; 64
 6fa:	91 05       	cpc	r25, r1
 6fc:	09 f0       	breq	.+2      	; 0x700 <Endpoint_Write_Control_Stream_LE+0x7a>
 6fe:	20 e0       	ldi	r18, 0x00	; 0
 700:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 704:	8e 77       	andi	r24, 0x7E	; 126
 706:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 70a:	d0 cf       	rjmp	.-96     	; 0x6ac <Endpoint_Write_Control_Stream_LE+0x26>
 70c:	21 11       	cpse	r18, r1
 70e:	d1 cf       	rjmp	.-94     	; 0x6b2 <Endpoint_Write_Control_Stream_LE+0x2c>
 710:	0a c0       	rjmp	.+20     	; 0x726 <Endpoint_Write_Control_Stream_LE+0xa0>
 712:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 716:	88 23       	and	r24, r24
 718:	61 f0       	breq	.+24     	; 0x732 <Endpoint_Write_Control_Stream_LE+0xac>
 71a:	85 30       	cpi	r24, 0x05	; 5
 71c:	61 f0       	breq	.+24     	; 0x736 <Endpoint_Write_Control_Stream_LE+0xb0>
 71e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 722:	83 fd       	sbrc	r24, 3
 724:	0a c0       	rjmp	.+20     	; 0x73a <Endpoint_Write_Control_Stream_LE+0xb4>
 726:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 72a:	82 ff       	sbrs	r24, 2
 72c:	f2 cf       	rjmp	.-28     	; 0x712 <Endpoint_Write_Control_Stream_LE+0x8c>
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret
 732:	82 e0       	ldi	r24, 0x02	; 2
 734:	08 95       	ret
 736:	83 e0       	ldi	r24, 0x03	; 3
 738:	08 95       	ret
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	08 95       	ret

0000073e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 73e:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <USB_ControlRequest+0x6>
 742:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <USB_ControlRequest+0x7>
 746:	26 17       	cp	r18, r22
 748:	37 07       	cpc	r19, r23
 74a:	48 f0       	brcs	.+18     	; 0x75e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 74c:	61 15       	cp	r22, r1
 74e:	71 05       	cpc	r23, r1
 750:	39 f4       	brne	.+14     	; 0x760 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 752:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 756:	2e 77       	andi	r18, 0x7E	; 126
 758:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 75c:	01 c0       	rjmp	.+2      	; 0x760 <Endpoint_Write_Control_PStream_LE+0x22>
 75e:	b9 01       	movw	r22, r18
 760:	fc 01       	movw	r30, r24
 762:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 764:	61 15       	cp	r22, r1
 766:	71 05       	cpc	r23, r1
 768:	81 f1       	breq	.+96     	; 0x7ca <Endpoint_Write_Control_PStream_LE+0x8c>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 76a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 76e:	88 23       	and	r24, r24
 770:	09 f4       	brne	.+2      	; 0x774 <Endpoint_Write_Control_PStream_LE+0x36>
 772:	3e c0       	rjmp	.+124    	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 774:	85 30       	cpi	r24, 0x05	; 5
 776:	09 f4       	brne	.+2      	; 0x77a <Endpoint_Write_Control_PStream_LE+0x3c>
 778:	3d c0       	rjmp	.+122    	; 0x7f4 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 77a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 77e:	83 fd       	sbrc	r24, 3
 780:	3b c0       	rjmp	.+118    	; 0x7f8 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 782:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 786:	82 fd       	sbrc	r24, 2
 788:	2d c0       	rjmp	.+90     	; 0x7e4 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 78a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  break;

		if (Endpoint_IsINReady())
 78e:	80 ff       	sbrs	r24, 0
 790:	e9 cf       	rjmp	.-46     	; 0x764 <Endpoint_Write_Control_PStream_LE+0x26>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 792:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 796:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 798:	61 15       	cp	r22, r1
 79a:	71 05       	cpc	r23, r1
 79c:	59 f0       	breq	.+22     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x76>
 79e:	80 34       	cpi	r24, 0x40	; 64
 7a0:	91 05       	cpc	r25, r1
 7a2:	40 f4       	brcc	.+16     	; 0x7b4 <Endpoint_Write_Control_PStream_LE+0x76>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 7a4:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 7a6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 7aa:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 7ac:	61 50       	subi	r22, 0x01	; 1
 7ae:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	f2 cf       	rjmp	.-28     	; 0x798 <Endpoint_Write_Control_PStream_LE+0x5a>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 7b4:	21 e0       	ldi	r18, 0x01	; 1
 7b6:	80 34       	cpi	r24, 0x40	; 64
 7b8:	91 05       	cpc	r25, r1
 7ba:	09 f0       	breq	.+2      	; 0x7be <Endpoint_Write_Control_PStream_LE+0x80>
 7bc:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 7be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 7c2:	8e 77       	andi	r24, 0x7E	; 126
 7c4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 7c8:	cd cf       	rjmp	.-102    	; 0x764 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7ca:	21 11       	cpse	r18, r1
 7cc:	ce cf       	rjmp	.-100    	; 0x76a <Endpoint_Write_Control_PStream_LE+0x2c>
 7ce:	0a c0       	rjmp	.+20     	; 0x7e4 <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7d0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7d4:	88 23       	and	r24, r24
 7d6:	61 f0       	breq	.+24     	; 0x7f0 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7d8:	85 30       	cpi	r24, 0x05	; 5
 7da:	61 f0       	breq	.+24     	; 0x7f4 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7e0:	83 fd       	sbrc	r24, 3
 7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7e8:	82 ff       	sbrs	r24, 2
 7ea:	f2 cf       	rjmp	.-28     	; 0x7d0 <Endpoint_Write_Control_PStream_LE+0x92>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7f0:	82 e0       	ldi	r24, 0x02	; 2
 7f2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7f4:	83 e0       	ldi	r24, 0x03	; 3
 7f6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7f8:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7fa:	08 95       	ret

000007fc <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 7fc:	98 2f       	mov	r25, r24
 7fe:	95 30       	cpi	r25, 0x05	; 5
 800:	68 f5       	brcc	.+90     	; 0x85c <Endpoint_ConfigureEndpoint_Prv+0x60>
 802:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 806:	98 17       	cp	r25, r24
 808:	39 f0       	breq	.+14     	; 0x818 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 80a:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 80e:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 812:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 816:	03 c0       	rjmp	.+6      	; 0x81e <Endpoint_ConfigureEndpoint_Prv+0x22>
 818:	24 2f       	mov	r18, r20
 81a:	76 2f       	mov	r23, r22
 81c:	50 e0       	ldi	r21, 0x00	; 0
 81e:	21 fd       	sbrc	r18, 1
 820:	02 c0       	rjmp	.+4      	; 0x826 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 822:	9f 5f       	subi	r25, 0xFF	; 255
 824:	ec cf       	rjmp	.-40     	; 0x7fe <Endpoint_ConfigureEndpoint_Prv+0x2>
 826:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 82a:	3e 7f       	andi	r19, 0xFE	; 254
 82c:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 830:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 834:	3d 7f       	andi	r19, 0xFD	; 253
 836:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 83a:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 83e:	31 60       	ori	r19, 0x01	; 1
 840:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 844:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 848:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 84c:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 850:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 854:	27 fd       	sbrc	r18, 7
 856:	e5 cf       	rjmp	.-54     	; 0x822 <Endpoint_ConfigureEndpoint_Prv+0x26>
 858:	80 e0       	ldi	r24, 0x00	; 0
 85a:	08 95       	ret
 85c:	8f 70       	andi	r24, 0x0F	; 15
 85e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	08 95       	ret

00000866 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 866:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <USB_ControlRequest>
 86a:	87 ff       	sbrs	r24, 7
 86c:	11 c0       	rjmp	.+34     	; 0x890 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 86e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 872:	82 fd       	sbrc	r24, 2
 874:	05 c0       	rjmp	.+10     	; 0x880 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 876:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 87a:	81 11       	cpse	r24, r1
 87c:	f8 cf       	rjmp	.-16     	; 0x86e <Endpoint_ClearStatusStage+0x8>
 87e:	11 c0       	rjmp	.+34     	; 0x8a2 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 880:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 884:	8b 77       	andi	r24, 0x7B	; 123
 886:	0b c0       	rjmp	.+22     	; 0x89e <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 888:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 88c:	88 23       	and	r24, r24
 88e:	49 f0       	breq	.+18     	; 0x8a2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 890:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 894:	80 ff       	sbrs	r24, 0
 896:	f8 cf       	rjmp	.-16     	; 0x888 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 89c:	8e 77       	andi	r24, 0x7E	; 126
 89e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 8a2:	08 95       	ret

000008a4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 8a4:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 8a8:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
 8ac:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 8ae:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 8b2:	84 2f       	mov	r24, r20
 8b4:	81 70       	andi	r24, 0x01	; 1
 8b6:	40 ff       	sbrs	r20, 0
 8b8:	23 c0       	rjmp	.+70     	; 0x900 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 8ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 8be:	80 fd       	sbrc	r24, 0
 8c0:	1d c0       	rjmp	.+58     	; 0x8fc <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8c2:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8c6:	88 23       	and	r24, r24
 8c8:	99 f0       	breq	.+38     	; 0x8f0 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8ca:	85 30       	cpi	r24, 0x05	; 5
 8cc:	99 f0       	breq	.+38     	; 0x8f4 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8ce:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8d2:	85 fd       	sbrc	r24, 5
 8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <Endpoint_WaitUntilReady+0x54>
 8d6:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__EEPROM_REGION_LENGTH__+0x7f00e4>
 8da:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__EEPROM_REGION_LENGTH__+0x7f00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8de:	24 17       	cp	r18, r20
 8e0:	35 07       	cpc	r19, r21
 8e2:	29 f3       	breq	.-54     	; 0x8ae <Endpoint_WaitUntilReady+0xa>
 8e4:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8e6:	11 f0       	breq	.+4      	; 0x8ec <Endpoint_WaitUntilReady+0x48>
 8e8:	9a 01       	movw	r18, r20
 8ea:	e1 cf       	rjmp	.-62     	; 0x8ae <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 8ec:	84 e0       	ldi	r24, 0x04	; 4
 8ee:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8f0:	82 e0       	ldi	r24, 0x02	; 2
 8f2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 8f4:	83 e0       	ldi	r24, 0x03	; 3
 8f6:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 900:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 904:	42 ff       	sbrs	r20, 2
 906:	dd cf       	rjmp	.-70     	; 0x8c2 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 908:	08 95       	ret

0000090a <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 90a:	41 d0       	rcall	.+130    	; 0x98e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 90c:	43 d0       	rcall	.+134    	; 0x994 <USB_INT_ClearAllInterrupts>
 90e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 912:	8f 77       	andi	r24, 0x7F	; 127
 914:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 918:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON |=  (1 << USBE);
 91c:	80 68       	ori	r24, 0x80	; 128
 91e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 922:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 926:	8f 7d       	andi	r24, 0xDF	; 223
 928:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 92c:	84 e0       	ldi	r24, 0x04	; 4

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 92e:	89 bd       	out	0x29, r24	; 41
 930:	86 e0       	ldi	r24, 0x06	; 6
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 932:	89 bd       	out	0x29, r24	; 41
 934:	09 b4       	in	r0, 0x29	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 936:	00 fe       	sbrs	r0, 0
 938:	fd cf       	rjmp	.-6      	; 0x934 <USB_ResetInterface+0x2a>
 93a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 93e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 942:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 946:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 94a:	42 e3       	ldi	r20, 0x32	; 50
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 94c:	60 e0       	ldi	r22, 0x00	; 0
 94e:	80 e0       	ldi	r24, 0x00	; 0
 950:	55 df       	rcall	.-342    	; 0x7fc <Endpoint_ConfigureEndpoint_Prv>
 952:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 956:	8e 7f       	andi	r24, 0xFE	; 254
 958:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 95c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 960:	81 60       	ori	r24, 0x01	; 1
 962:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 966:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 96a:	88 60       	ori	r24, 0x08	; 8
 96c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 970:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 974:	8e 7f       	andi	r24, 0xFE	; 254
 976:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 97a:	08 95       	ret

0000097c <USB_Init>:
 97c:	e3 e6       	ldi	r30, 0x63	; 99
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	80 81       	ld	r24, Z
 982:	8e 7f       	andi	r24, 0xFE	; 254
 984:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_IsInitialized>

	USB_ResetInterface();
 98c:	be cf       	rjmp	.-132    	; 0x90a <USB_ResetInterface>

0000098e <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 98e:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 992:	08 95       	ret

00000994 <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 994:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 998:	08 95       	ret

0000099a <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 99a:	1f 92       	push	r1
 99c:	0f 92       	push	r0
 99e:	0f b6       	in	r0, 0x3f	; 63
 9a0:	0f 92       	push	r0
 9a2:	11 24       	eor	r1, r1
 9a4:	2f 93       	push	r18
 9a6:	3f 93       	push	r19
 9a8:	4f 93       	push	r20
 9aa:	5f 93       	push	r21
 9ac:	6f 93       	push	r22
 9ae:	7f 93       	push	r23
 9b0:	8f 93       	push	r24
 9b2:	9f 93       	push	r25
 9b4:	af 93       	push	r26
 9b6:	bf 93       	push	r27
 9b8:	ef 93       	push	r30
 9ba:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 9bc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 9c0:	82 ff       	sbrs	r24, 2
 9c2:	0a c0       	rjmp	.+20     	; 0x9d8 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 9c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 9c8:	82 ff       	sbrs	r24, 2
 9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 9cc:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 9d0:	8b 7f       	andi	r24, 0xFB	; 251
 9d2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 9d6:	e6 d1       	rcall	.+972    	; 0xda4 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 9d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 9dc:	80 ff       	sbrs	r24, 0
 9de:	17 c0       	rjmp	.+46     	; 0xa0e <__vector_11+0x74>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 9e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 9e4:	80 ff       	sbrs	r24, 0
 9e6:	13 c0       	rjmp	.+38     	; 0xa0e <__vector_11+0x74>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 9e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 9ec:	8e 7f       	andi	r24, 0xFE	; 254
 9ee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 9f2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 9f6:	80 61       	ori	r24, 0x10	; 16
 9f8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 9fc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 a00:	80 62       	ori	r24, 0x20	; 32
 a02:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 a06:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 a08:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <USB_DeviceState>
		EVENT_USB_Device_Disconnect();
 a0c:	d5 db       	rcall	.-2134   	; 0x1b8 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 a0e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 a12:	84 ff       	sbrs	r24, 4
 a14:	2f c0       	rjmp	.+94     	; 0xa74 <__vector_11+0xda>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 a16:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 a1a:	84 ff       	sbrs	r24, 4
 a1c:	2b c0       	rjmp	.+86     	; 0xa74 <__vector_11+0xda>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a1e:	84 e0       	ldi	r24, 0x04	; 4
 a20:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a22:	86 e0       	ldi	r24, 0x06	; 6
 a24:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a26:	09 b4       	in	r0, 0x29	; 41
 a28:	00 fe       	sbrs	r0, 0
 a2a:	fd cf       	rjmp	.-6      	; 0xa26 <__vector_11+0x8c>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a2c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 a30:	8f 7d       	andi	r24, 0xDF	; 223
 a32:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a36:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 a3a:	8f 7e       	andi	r24, 0xEF	; 239
 a3c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 a44:	8f 7e       	andi	r24, 0xEF	; 239
 a46:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a4a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 a4e:	81 60       	ori	r24, 0x01	; 1
 a50:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 a54:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_Device_ConfigurationNumber>
 a58:	88 23       	and	r24, r24
 a5a:	11 f0       	breq	.+4      	; 0xa60 <__vector_11+0xc6>
		  USB_DeviceState = DEVICE_STATE_Configured;
 a5c:	84 e0       	ldi	r24, 0x04	; 4
 a5e:	07 c0       	rjmp	.+14     	; 0xa6e <__vector_11+0xd4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 a60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 a64:	87 fd       	sbrc	r24, 7
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <__vector_11+0xd2>
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	01 c0       	rjmp	.+2      	; 0xa6e <__vector_11+0xd4>
 a6c:	83 e0       	ldi	r24, 0x03	; 3
 a6e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
 a72:	a1 db       	rcall	.-2238   	; 0x1b6 <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 a74:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 a78:	83 ff       	sbrs	r24, 3
 a7a:	22 c0       	rjmp	.+68     	; 0xac0 <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 a7c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 a80:	83 ff       	sbrs	r24, 3
 a82:	1e c0       	rjmp	.+60     	; 0xac0 <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 a84:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 a88:	87 7f       	andi	r24, 0xF7	; 247
 a8a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 a94:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 a98:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 a9c:	8e 7f       	andi	r24, 0xFE	; 254
 a9e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 aa2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 aa6:	8e 7f       	andi	r24, 0xFE	; 254
 aa8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 aac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 ab0:	80 61       	ori	r24, 0x10	; 16
 ab2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 ab6:	42 e3       	ldi	r20, 0x32	; 50
 ab8:	60 e0       	ldi	r22, 0x00	; 0
 aba:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 abc:	9f de       	rcall	.-706    	; 0x7fc <Endpoint_ConfigureEndpoint_Prv>
 abe:	72 d1       	rcall	.+740    	; 0xda4 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 ac0:	ff 91       	pop	r31
 ac2:	ef 91       	pop	r30
 ac4:	bf 91       	pop	r27
 ac6:	af 91       	pop	r26
 ac8:	9f 91       	pop	r25
 aca:	8f 91       	pop	r24
 acc:	7f 91       	pop	r23
 ace:	6f 91       	pop	r22
 ad0:	5f 91       	pop	r21
 ad2:	4f 91       	pop	r20
 ad4:	3f 91       	pop	r19
 ad6:	2f 91       	pop	r18
 ad8:	0f 90       	pop	r0
 ada:	0f be       	out	0x3f, r0	; 63
 adc:	0f 90       	pop	r0
 ade:	1f 90       	pop	r1
 ae0:	18 95       	reti

00000ae2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 ae2:	1f 93       	push	r17
 ae4:	cf 93       	push	r28
 ae6:	df 93       	push	r29
 ae8:	cd b7       	in	r28, 0x3d	; 61
 aea:	de b7       	in	r29, 0x3e	; 62
 aec:	aa 97       	sbiw	r28, 0x2a	; 42
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	f8 94       	cli
 af2:	de bf       	out	0x3e, r29	; 62
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	cd bf       	out	0x3d, r28	; 61
 af8:	e8 e3       	ldi	r30, 0x38	; 56
 afa:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 afc:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b00:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b02:	21 e0       	ldi	r18, 0x01	; 1
 b04:	e0 34       	cpi	r30, 0x40	; 64
 b06:	f2 07       	cpc	r31, r18
 b08:	c9 f7       	brne	.-14     	; 0xafc <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b0a:	5f db       	rcall	.-2370   	; 0x1ca <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	if (Endpoint_IsSETUPReceived())
 b10:	83 ff       	sbrs	r24, 3
 b12:	30 c1       	rjmp	.+608    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b14:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 b18:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <USB_ControlRequest+0x1>
 b1c:	95 30       	cpi	r25, 0x05	; 5
 b1e:	09 f4       	brne	.+2      	; 0xb22 <USB_Device_ProcessControlRequest+0x40>
 b20:	83 c0       	rjmp	.+262    	; 0xc28 <USB_Device_ProcessControlRequest+0x146>
 b22:	30 f4       	brcc	.+12     	; 0xb30 <USB_Device_ProcessControlRequest+0x4e>
 b24:	91 30       	cpi	r25, 0x01	; 1
 b26:	a9 f1       	breq	.+106    	; 0xb92 <USB_Device_ProcessControlRequest+0xb0>
 b28:	68 f0       	brcs	.+26     	; 0xb44 <USB_Device_ProcessControlRequest+0x62>
 b2a:	93 30       	cpi	r25, 0x03	; 3
 b2c:	91 f1       	breq	.+100    	; 0xb92 <USB_Device_ProcessControlRequest+0xb0>
 b2e:	22 c1       	rjmp	.+580    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
 b30:	98 30       	cpi	r25, 0x08	; 8
 b32:	09 f4       	brne	.+2      	; 0xb36 <USB_Device_ProcessControlRequest+0x54>
 b34:	ef c0       	rjmp	.+478    	; 0xd14 <USB_Device_ProcessControlRequest+0x232>
 b36:	99 30       	cpi	r25, 0x09	; 9
 b38:	09 f4       	brne	.+2      	; 0xb3c <USB_Device_ProcessControlRequest+0x5a>
 b3a:	fb c0       	rjmp	.+502    	; 0xd32 <USB_Device_ProcessControlRequest+0x250>
 b3c:	96 30       	cpi	r25, 0x06	; 6
 b3e:	09 f0       	breq	.+2      	; 0xb42 <USB_Device_ProcessControlRequest+0x60>
 b40:	19 c1       	rjmp	.+562    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
 b42:	94 c0       	rjmp	.+296    	; 0xc6c <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b44:	80 38       	cpi	r24, 0x80	; 128
 b46:	21 f0       	breq	.+8      	; 0xb50 <USB_Device_ProcessControlRequest+0x6e>
 b48:	82 38       	cpi	r24, 0x82	; 130
 b4a:	09 f0       	breq	.+2      	; 0xb4e <USB_Device_ProcessControlRequest+0x6c>
 b4c:	13 c1       	rjmp	.+550    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
 b4e:	08 c0       	rjmp	.+16     	; 0xb60 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 b50:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b54:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <USB_Device_RemoteWakeupEnabled>
 b58:	99 23       	and	r25, r25
 b5a:	89 f0       	breq	.+34     	; 0xb7e <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b5c:	82 60       	ori	r24, 0x02	; 2
 b5e:	0f c0       	rjmp	.+30     	; 0xb7e <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b60:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x4>
 b64:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 b66:	85 30       	cpi	r24, 0x05	; 5
 b68:	08 f0       	brcs	.+2      	; 0xb6c <USB_Device_ProcessControlRequest+0x8a>
 b6a:	04 c1       	rjmp	.+520    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b6c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b70:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 b74:	85 fb       	bst	r24, 5
 b76:	88 27       	eor	r24, r24
 b78:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b7a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b7e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b82:	97 7f       	andi	r25, 0xF7	; 247
 b84:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b88:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Data >> 8);
 b8c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 b90:	cc c0       	rjmp	.+408    	; 0xd2a <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b92:	28 2f       	mov	r18, r24
 b94:	2d 7f       	andi	r18, 0xFD	; 253
 b96:	09 f0       	breq	.+2      	; 0xb9a <USB_Device_ProcessControlRequest+0xb8>
 b98:	ed c0       	rjmp	.+474    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b9a:	88 23       	and	r24, r24
 b9c:	19 f0       	breq	.+6      	; 0xba4 <USB_Device_ProcessControlRequest+0xc2>
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	61 f0       	breq	.+24     	; 0xbba <USB_Device_ProcessControlRequest+0xd8>
 ba2:	e8 c0       	rjmp	.+464    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 ba4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 ba8:	81 30       	cpi	r24, 0x01	; 1
 baa:	09 f0       	breq	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0xcc>
 bac:	e3 c0       	rjmp	.+454    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 bae:	93 30       	cpi	r25, 0x03	; 3
 bb0:	09 f0       	breq	.+2      	; 0xbb4 <USB_Device_ProcessControlRequest+0xd2>
 bb2:	80 e0       	ldi	r24, 0x00	; 0
 bb4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_Device_RemoteWakeupEnabled>
 bb8:	2e c0       	rjmp	.+92     	; 0xc16 <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 bba:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 bbe:	81 11       	cpse	r24, r1
 bc0:	2a c0       	rjmp	.+84     	; 0xc16 <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bc2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <USB_ControlRequest+0x4>
 bc6:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 bc8:	2f ef       	ldi	r18, 0xFF	; 255
 bca:	28 0f       	add	r18, r24
 bcc:	24 30       	cpi	r18, 0x04	; 4
 bce:	08 f0       	brcs	.+2      	; 0xbd2 <USB_Device_ProcessControlRequest+0xf0>
 bd0:	d1 c0       	rjmp	.+418    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bd2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 bd6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 bda:	20 ff       	sbrs	r18, 0
 bdc:	1c c0       	rjmp	.+56     	; 0xc16 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 bde:	93 30       	cpi	r25, 0x03	; 3
 be0:	21 f4       	brne	.+8      	; 0xbea <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 be2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 be6:	80 62       	ori	r24, 0x20	; 32
 be8:	14 c0       	rjmp	.+40     	; 0xc12 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 bea:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 bee:	90 61       	ori	r25, 0x10	; 16
 bf0:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 bf4:	21 e0       	ldi	r18, 0x01	; 1
 bf6:	30 e0       	ldi	r19, 0x00	; 0
 bf8:	a9 01       	movw	r20, r18
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <USB_Device_ProcessControlRequest+0x11e>
 bfc:	44 0f       	add	r20, r20
 bfe:	55 1f       	adc	r21, r21
 c00:	8a 95       	dec	r24
 c02:	e2 f7       	brpl	.-8      	; 0xbfc <USB_Device_ProcessControlRequest+0x11a>
 c04:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 c08:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c0c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 c10:	88 60       	ori	r24, 0x08	; 8
 c12:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c16:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c1e:	87 7f       	andi	r24, 0xF7	; 247
 c20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c24:	20 de       	rcall	.-960    	; 0x866 <Endpoint_ClearStatusStage>
 c26:	a6 c0       	rjmp	.+332    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c28:	81 11       	cpse	r24, r1
 c2a:	a4 c0       	rjmp	.+328    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c2c:	10 91 3a 01 	lds	r17, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 c30:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c32:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 c36:	80 78       	andi	r24, 0x80	; 128
 c38:	81 2b       	or	r24, r17
 c3a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 c3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c42:	87 7f       	andi	r24, 0xF7	; 247
 c44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c48:	0e de       	rcall	.-996    	; 0x866 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	while (!(Endpoint_IsINReady()));
 c4e:	80 ff       	sbrs	r24, 0
 c50:	fc cf       	rjmp	.-8      	; 0xc4a <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 c52:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 c56:	80 68       	ori	r24, 0x80	; 128
 c58:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c5c:	11 11       	cpse	r17, r1
 c5e:	02 c0       	rjmp	.+4      	; 0xc64 <USB_Device_ProcessControlRequest+0x182>
 c60:	82 e0       	ldi	r24, 0x02	; 2
 c62:	01 c0       	rjmp	.+2      	; 0xc66 <USB_Device_ProcessControlRequest+0x184>
 c64:	83 e0       	ldi	r24, 0x03	; 3
 c66:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>
 c6a:	84 c0       	rjmp	.+264    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 c6c:	80 58       	subi	r24, 0x80	; 128
 c6e:	82 30       	cpi	r24, 0x02	; 2
 c70:	08 f0       	brcs	.+2      	; 0xc74 <USB_Device_ProcessControlRequest+0x192>
 c72:	80 c0       	rjmp	.+256    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 c74:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 c78:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <USB_ControlRequest+0x3>
 c7c:	8c 3d       	cpi	r24, 0xDC	; 220
 c7e:	53 e0       	ldi	r21, 0x03	; 3
 c80:	95 07       	cpc	r25, r21
 c82:	71 f5       	brne	.+92     	; 0xce0 <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 c84:	83 e0       	ldi	r24, 0x03	; 3
 c86:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 c88:	8a e2       	ldi	r24, 0x2A	; 42
 c8a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 c8c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 c8e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 c90:	de 01       	movw	r26, r28
 c92:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 c94:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 c96:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 c98:	51 e2       	ldi	r21, 0x21	; 33
 c9a:	e3 2f       	mov	r30, r19
 c9c:	f0 e0       	ldi	r31, 0x00	; 0
 c9e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__EEPROM_REGION_LENGTH__+0x7f0057>
 ca2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 ca4:	20 ff       	sbrs	r18, 0
 ca6:	03 c0       	rjmp	.+6      	; 0xcae <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
 ca8:	e2 95       	swap	r30
 caa:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 cac:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 cae:	ef 70       	andi	r30, 0x0F	; 15
 cb0:	8e 2f       	mov	r24, r30
 cb2:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 cb4:	ea 30       	cpi	r30, 0x0A	; 10
 cb6:	10 f0       	brcs	.+4      	; 0xcbc <USB_Device_ProcessControlRequest+0x1da>
 cb8:	c7 96       	adiw	r24, 0x37	; 55
 cba:	01 c0       	rjmp	.+2      	; 0xcbe <USB_Device_ProcessControlRequest+0x1dc>
 cbc:	c0 96       	adiw	r24, 0x30	; 48
 cbe:	8d 93       	st	X+, r24
 cc0:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cc2:	2f 5f       	subi	r18, 0xFF	; 255
 cc4:	24 31       	cpi	r18, 0x14	; 20
 cc6:	49 f7       	brne	.-46     	; 0xc9a <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 cc8:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 cca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cce:	87 7f       	andi	r24, 0xF7	; 247
 cd0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 cd4:	6a e2       	ldi	r22, 0x2A	; 42
 cd6:	70 e0       	ldi	r23, 0x00	; 0
 cd8:	ce 01       	movw	r24, r28
 cda:	01 96       	adiw	r24, 0x01	; 1
 cdc:	d4 dc       	rcall	.-1624   	; 0x686 <Endpoint_Write_Control_Stream_LE>
 cde:	14 c0       	rjmp	.+40     	; 0xd08 <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ce0:	60 91 3c 01 	lds	r22, 0x013C	; 0x80013c <USB_ControlRequest+0x4>
 ce4:	70 91 3d 01 	lds	r23, 0x013D	; 0x80013d <USB_ControlRequest+0x5>
 ce8:	ae 01       	movw	r20, r28
 cea:	4f 5f       	subi	r20, 0xFF	; 255
 cec:	5f 4f       	sbci	r21, 0xFF	; 255
 cee:	f6 db       	rcall	.-2068   	; 0x4dc <CALLBACK_USB_GetDescriptor>
 cf0:	bc 01       	movw	r22, r24
 cf2:	89 2b       	or	r24, r25
 cf4:	09 f4       	brne	.+2      	; 0xcf8 <USB_Device_ProcessControlRequest+0x216>
 cf6:	3e c0       	rjmp	.+124    	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
 cf8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cfc:	97 7f       	andi	r25, 0xF7	; 247
 cfe:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d02:	89 81       	ldd	r24, Y+1	; 0x01
 d04:	9a 81       	ldd	r25, Y+2	; 0x02
 d06:	1b dd       	rcall	.-1482   	; 0x73e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d0c:	8b 77       	andi	r24, 0x7B	; 123
 d0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d12:	30 c0       	rjmp	.+96     	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d14:	80 38       	cpi	r24, 0x80	; 128
 d16:	71 f5       	brne	.+92     	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d1c:	87 7f       	andi	r24, 0xF7	; 247
 d1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d22:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d2e:	8e 77       	andi	r24, 0x7E	; 126
 d30:	77 cf       	rjmp	.-274    	; 0xc20 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d32:	81 11       	cpse	r24, r1
 d34:	1f c0       	rjmp	.+62     	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d36:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 d3a:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <USB_ControlRequest+0x3>
 d3e:	99 27       	eor	r25, r25
 d40:	02 97       	sbiw	r24, 0x02	; 2
 d42:	c4 f4       	brge	.+48     	; 0xd74 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d48:	87 7f       	andi	r24, 0xF7	; 247
 d4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d4e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <USB_ControlRequest+0x2>
 d52:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 d56:	87 dd       	rcall	.-1266   	; 0x866 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 d58:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_Device_ConfigurationNumber>
 d5c:	81 11       	cpse	r24, r1
 d5e:	06 c0       	rjmp	.+12     	; 0xd6c <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 d60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 d64:	87 fd       	sbrc	r24, 7
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <USB_Device_ProcessControlRequest+0x28a>
 d68:	81 e0       	ldi	r24, 0x01	; 1
 d6a:	01 c0       	rjmp	.+2      	; 0xd6e <USB_Device_ProcessControlRequest+0x28c>
 d6c:	84 e0       	ldi	r24, 0x04	; 4
 d6e:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 d72:	23 da       	rcall	.-3002   	; 0x1ba <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 d78:	83 ff       	sbrs	r24, 3
 d7a:	0a c0       	rjmp	.+20     	; 0xd90 <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 d80:	87 7f       	andi	r24, 0xF7	; 247
 d82:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 d86:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 d8a:	80 62       	ori	r24, 0x20	; 32
 d8c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 d90:	aa 96       	adiw	r28, 0x2a	; 42
 d92:	0f b6       	in	r0, 0x3f	; 63
 d94:	f8 94       	cli
 d96:	de bf       	out	0x3e, r29	; 62
 d98:	0f be       	out	0x3f, r0	; 63
 d9a:	cd bf       	out	0x3d, r28	; 61
 d9c:	df 91       	pop	r29
 d9e:	cf 91       	pop	r28
 da0:	1f 91       	pop	r17
 da2:	08 95       	ret

00000da4 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 da4:	08 95       	ret

00000da6 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 da6:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 da8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_DeviceState>
 dac:	88 23       	and	r24, r24
 dae:	99 f0       	breq	.+38     	; 0xdd6 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 db0:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 db4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 db6:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 dba:	89 2f       	mov	r24, r25
 dbc:	81 70       	andi	r24, 0x01	; 1
 dbe:	90 fd       	sbrc	r25, 0
 dc0:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 dc2:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dc4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 dcc:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 dce:	89 de       	rcall	.-750    	; 0xae2 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 dd0:	cf 70       	andi	r28, 0x0F	; 15
 dd2:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 dd6:	cf 91       	pop	r28
 dd8:	08 95       	ret

00000dda <__mulhi3>:
 dda:	00 24       	eor	r0, r0
 ddc:	55 27       	eor	r21, r21
 dde:	04 c0       	rjmp	.+8      	; 0xde8 <__mulhi3+0xe>
 de0:	08 0e       	add	r0, r24
 de2:	59 1f       	adc	r21, r25
 de4:	88 0f       	add	r24, r24
 de6:	99 1f       	adc	r25, r25
 de8:	00 97       	sbiw	r24, 0x00	; 0
 dea:	29 f0       	breq	.+10     	; 0xdf6 <__mulhi3+0x1c>
 dec:	76 95       	lsr	r23
 dee:	67 95       	ror	r22
 df0:	b8 f3       	brcs	.-18     	; 0xde0 <__mulhi3+0x6>
 df2:	71 05       	cpc	r23, r1
 df4:	b9 f7       	brne	.-18     	; 0xde4 <__mulhi3+0xa>
 df6:	80 2d       	mov	r24, r0
 df8:	95 2f       	mov	r25, r21
 dfa:	08 95       	ret

00000dfc <_exit>:
 dfc:	f8 94       	cli

00000dfe <__stop_program>:
 dfe:	ff cf       	rjmp	.-2      	; 0xdfe <__stop_program>
